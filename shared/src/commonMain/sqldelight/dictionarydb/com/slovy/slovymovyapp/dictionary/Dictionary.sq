-- Dictionary database schema for LanguageCardResponse

-- Top-level POS entry (grouping forms and senses by part of speech)
CREATE TABLE pos_entry (
  id TEXT NOT NULL PRIMARY KEY, -- UUID
  pos TEXT
);

-- Word forms belonging to a POS entry
CREATE TABLE form (
  id TEXT NOT NULL PRIMARY KEY, -- UUID
  pos_entry_id TEXT NOT NULL REFERENCES pos_entry(id) ON DELETE CASCADE,
  form TEXT NOT NULL,
  form_normalized TEXT NOT NULL
);

-- Tags associated with a word form (normalized list of strings)
CREATE TABLE form_tag (
  form_id TEXT NOT NULL REFERENCES form(id) ON DELETE CASCADE,
  tag TEXT NOT NULL,
  PRIMARY KEY(form_id, tag)
);

-- Senses associated with a POS entry
CREATE TABLE sense (
  sense_id TEXT NOT NULL PRIMARY KEY,
  pos_entry_id TEXT NOT NULL REFERENCES pos_entry(id) ON DELETE CASCADE,
  sense_definition TEXT NOT NULL,
  learner_level TEXT NOT NULL,
  frequency TEXT NOT NULL,
  semantic_group_id TEXT NOT NULL,
  name_type TEXT
);

-- Examples for a sense; example_id comes from source JSON and is scoped per sense
CREATE TABLE sense_example (
  sense_id TEXT NOT NULL REFERENCES sense(sense_id) ON DELETE CASCADE,
  example_id INTEGER NOT NULL,
  text TEXT NOT NULL,
  PRIMARY KEY(sense_id, example_id)
);

-- Synonyms for a sense
CREATE TABLE sense_synonym (
  sense_id TEXT NOT NULL REFERENCES sense(sense_id) ON DELETE CASCADE,
  synonym TEXT NOT NULL,
  PRIMARY KEY(sense_id, synonym)
);

-- Antonyms for a sense
CREATE TABLE sense_antonym (
  sense_id TEXT NOT NULL REFERENCES sense(sense_id) ON DELETE CASCADE,
  antonym TEXT NOT NULL,
  PRIMARY KEY(sense_id, antonym)
);

-- Common phrases for a sense
CREATE TABLE sense_common_phrase (
  sense_id TEXT NOT NULL REFERENCES sense(sense_id) ON DELETE CASCADE,
  phrase TEXT NOT NULL,
  PRIMARY KEY(sense_id, phrase)
);

-- Traits for a sense; trait_type constrained to known enum values
CREATE TABLE sense_trait (
  sense_id TEXT NOT NULL REFERENCES sense(sense_id) ON DELETE CASCADE,
  trait_type TEXT NOT NULL CHECK (trait_type IN (
    'dated','colloquial','obsolete','dialectal','archaic','regional','slang','form','surname'
  )),
  comment TEXT NOT NULL,
  PRIMARY KEY(sense_id, trait_type, comment)
);

-- Indexes to speed up searches by form
CREATE INDEX IF NOT EXISTS idx_form_form ON form(form);
CREATE INDEX IF NOT EXISTS idx_form_form_lower ON form(lower(form));
CREATE INDEX IF NOT EXISTS idx_form_form_normalized ON form(form_normalized);

-- Queries
insertPosEntry:
INSERT INTO pos_entry(id, pos)
VALUES (?, ?);

insertForm:
INSERT INTO form(id, pos_entry_id, form, form_normalized)
VALUES (?, ?, ?, ?);

insertFormTag:
INSERT OR IGNORE INTO form_tag(form_id, tag)
VALUES (?, ?);

insertSense:
INSERT OR REPLACE INTO sense(
  sense_id, pos_entry_id, sense_definition, learner_level, frequency, semantic_group_id, name_type
) VALUES (?, ?, ?, ?, ?, ?, ?);

insertSenseExample:
INSERT OR REPLACE INTO sense_example(sense_id, example_id, text)
VALUES (?, ?, ?);

insertSenseSynonym:
INSERT OR IGNORE INTO sense_synonym(sense_id, synonym)
VALUES (?, ?);

insertSenseAntonym:
INSERT OR IGNORE INTO sense_antonym(sense_id, antonym)
VALUES (?, ?);

insertSenseCommonPhrase:
INSERT OR IGNORE INTO sense_common_phrase(sense_id, phrase)
VALUES (?, ?);

insertSenseTrait:
INSERT OR IGNORE INTO sense_trait(sense_id, trait_type, comment)
VALUES (?, ?, ?);

-- Search queries
-- Case-insensitive search using lower(); relies on idx_form_form_lower
selectFormsByWord:
SELECT f.id, f.pos_entry_id, f.form
FROM form f
WHERE lower(f.form) = lower(?);

-- Diacritic-insensitive search using precomputed normalized column
selectFormsByNormalized:
SELECT f.id, f.pos_entry_id, f.form
FROM form f
WHERE f.form_normalized = ?;
